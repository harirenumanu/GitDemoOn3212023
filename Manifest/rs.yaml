# # 2 types of selectors 
#     1. Equity based selectors.
#     2. Set based selectors.
# 1. Equality based selectors:
# --------------------------
# selector:
#   matchLabels:
#     app: myapp
#     environment: prod   # Select Pods with both `app=myapp` and `environment=prod`

# 2. Set based selectors:
# --------------------------
# selector:
#   matchExpressions:
#     - key: environment
#       operator: NotIn
#       values:
#         - test
#         - dev
# selector:
#   matchLabels:
#     component: redis
#   matchExpressions:
#     - { key: tier, operator: In, values: [cache] }
#     - { key: environment, operator: NotIn, values: [dev] }
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: rs
  labels:
    env: dev
spec:
  replicas: 3
  selector:
    matchExpressions:
      - { key: env, operator: In, values: [dev,prod] }
  template:
    metadata:
      name: rs-pod
      labels:
        env: dev
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
      - name: jenkins
        image: jenkins/jenkins:latest
        ports:
        - containerPort: 8080
---
# Creating service for replicaset..............
apiVersion: v1                # The version of the Kubernetes API
kind: Service                 # Specifies that this is a Service resource
metadata:
  name: rs-service            # The name of the Service
spec:
  selector:                   # Specifies which pods the service targets
    env: dev                 # The label selector is looking for pods with label 'env=dev'
  type: LoadBalancer        # The service type is ClusterIP, meaning it is only accessible within the cluster
  ports:
    - port: 80                # The service will expose port 80 externally
      targetPort: 80           # Traffic on port 80 will be forwarded to port 80 on the target pod
      name: nginx              # This is the name for the first port, indicating it might be for an nginx service
    - port: 8080               # The service will expose port 8080 externally
      targetPort: 8080         # Traffic on port 8080 will be forwarded to port 8080 on the target pod
      name: jenkins            # This is the name for the second port, indicating it might be for a Jenkins service
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: prod-rs
  labels:
    env: dev
spec:
  replicas: 4
  selector:
    matchExpressions:
      - {key: env, operator: In, values: [dev,prod]}
  template:
    metadata:
      name: prod-rs
      labels:
        env: dev
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
      - name: jenkins
        image: jenkins/jenkins:latest
        ports:
        - containerPort: 8080

